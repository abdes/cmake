function(swift_create_project_options)
  set(argOptions "TESTS" "TEST_LIBS" "DOCS" "EXAMPLES" "SKIP_CROSS_COMPILING_CHECK")
  set(argSingleArguments "PROJECT")
  set(argMultiArguments "TEST_PACKAGES")

  cmake_parse_arguments(x "${argOptions}" "${argSingleArguments}" "${argMultiArguments}" ${ARGN})

  if(x_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR "Unexpected extra arguments in swift_create_project_options: ${x_UNPARSED_ARGUMENTS}")
  endif()

  if(NOT x_PROJECT)
    set(x_PROJECT ${PROJECT_NAME})
  endif()

  if(NOT x_SKIP_CROSS_COMPILING_CHECK)
    if(CMAKE_CROSSCOMPILING)
      # Don't compile any test stuff if we are cross compiling
      message(STATUS "Skipping unit tests because we are cross compiling")
      set(disable_tests ON)
    endif()
  endif()

  if(NOT disable_tests AND x_TEST_LIBS)
    option(${x_PROJECT}_BUILD_TEST_LIBS "Enable build of test libraries for ${x_PROJECT}" ON)
    if(NOT ${x_PROJECT}_BUILD_TEST_LIBS)
      message(STATUS "${x_PROJECT} test libraries are DISABLED")
    endif()
  endif()

  if(NOT disable_tests AND x_TESTS)
    option(${x_PROJECT}_BUILD_TESTS "Enable build of unit tests for ${x_PROJECT}" ON)
    if(NOT ${x_PROJECT}_BUILD_TESTS)
      message(STATUS "${x_PROJECT} unit tests are DISABLED")
    endif()
  endif()

  if(NOT ${x_PROJECT}_BUILD_TESTS AND NOT ${x_PROJECT}_BUILD_TEST_LIBS)
    set(disable_tests ON)
  endif()

  if(NOT disable_tests)
    if(x_TEST_PACKAGES)
      foreach(P ${x_TEST_PACKAGES})
        find_package(${P})
        # Annoyingly, different test packages have different ways of reporting they were found
        set(found FALSE)
        if(${P} STREQUAL "Check" AND CHECK_FOUND)
          set(found TRUE)
        elseif(${P} STREQUAL "Googletest" AND TARGET gtest)
          set(found TRUE)
        elseif(${P} STREQUAL "RapidCheck" AND TARGET rapidcheck)
          set(found TRUE)
        elseif(${P} STREQUAL "GFlags" AND TARGET gflags)
          set(found TRUE)
        endif()
        if(NOT found)
          message(STATUS "Disable tests because dependency ${P} was not found")
          set(disable_tests ON)
        endif()
      endforeach()
    endif()
  endif()

  if(x_DOCS)
    option(${x_PROJECT}_BUILD_DOCS "Enable build of documentation for ${x_PROJECT}" ON)
    if(NOT ${x_PROJECT}_BUILD_DOCS)
      message(STATUS "${x_PROJECT} documentation is DISABLED")
    endif()
  endif()

  if(x_EXAMPLES)
    option(${x_PROJECT}_BUILD_EXAMPLES "Enable build of example code for ${x_PROJECT}" ON)
    if(NOT ${x_PROJECT}_BUILD_EXAMPLES)
      message(STATUS "${x_PROJECT} examples are DISABLED")
    endif()
  endif()

  foreach(feat "TESTS" "TEST_LIBS" "DOCS" "EXAMPLES")
    if(DEFINED ${x_PROJECT}_BUILD_${feat} AND NOT x_${feat})
      message(WARNING "${x_PROJECT}_BUILD_${feat} is set but the package does not support it")
    endif()
  endforeach()

endfunction()
  
