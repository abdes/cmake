function(verify_test_dependencies)
  cmake_parse_arguments(x "" "" "TEST_PACKAGES" ${ARGN})

  if(x_TEST_PACKAGES)
    foreach(P ${x_TEST_PACKAGES})
      find_package(${P})
      # Annoyingly, different test packages have different ways of reporting they were found
      set(found FALSE)
      if(${P} STREQUAL "Check" AND CHECK_FOUND)
        set(found TRUE)
      elseif(${P} STREQUAL "Googletest" AND TARGET gtest)
        set(found TRUE)
      elseif(${P} STREQUAL "RapidCheck" AND TARGET rapidcheck)
        set(found TRUE)
      elseif(${P} STREQUAL "GFlags" AND TARGET gflags)
        set(found TRUE)
      endif()
      if(NOT found)
        message(STATUS "Disable tests because dependency ${P} was not found")
        set(test_components_possible OFF PARENT_SCOPE)
      endif()
    endforeach()
  endif()
  set(x_test_packages_verified TRUE PARENT_SCOPE)
endfunction()


function(swift_create_project_options)
  set(argOptions "HAS_TESTS" "HAS_TEST_LIBS" "HAS_DOCS" "HAS_EXAMPLES" "SKIP_CROSS_COMPILING_CHECK")
  set(argSingleArguments "PROJECT" "DISABLE_TEST_COMPONENTS")
  set(argMultiArguments "TEST_PACKAGES")

  cmake_parse_arguments(x "${argOptions}" "${argSingleArguments}" "${argMultiArguments}" ${ARGN})

  if(x_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR "Unexpected extra arguments in swift_create_project_options: ${x_UNPARSED_ARGUMENTS}")
  endif()

  if(NOT x_PROJECT)
    set(x_PROJECT ${PROJECT_NAME})
  endif()

  set(test_components_possible ON)
  if(x_DISABLE_TEST_COMPONENTS)
    set(test_components_possible OFF)
  endif()

  if(NOT x_SKIP_CROSS_COMPILING_CHECK)
    if(CMAKE_CROSSCOMPILING)
      # Don't compile any test stuff if we are cross compiling
      message(STATUS "Skipping unit tests because we are cross compiling")
      set(test_components_possible OFF)
    endif()
  endif()

  set(build_tests FALSE)
  set(build_test_libs FALSE)

  if(x_HAS_TESTS)
    option(${x_PROJECT}_ENABLE_TESTS "Enable build of unit tests for ${x_PROJECT}" ${test_components_possible})
    if(${x_PROJECT}_ENABLE_TESTS)
      if(test_components_possible)
        set(build_tests TRUE)
      endif()
    endif()
  endif()

  if(x_HAS_TEST_LIBS)
    option(${x_PROJECT}_ENABLE_TEST_LIBS "Enable build of test libraries for ${x_PROJECT}" ${test_components_possible})
    if(${x_PROJECT}_ENABLE_TEST_LIBS)
      if(test_components_possible)
        set(build_test_libs TRUE)
      endif()
    endif()
  endif()

  if(build_tests OR build_test_libs)
    if(NOT x_test_packages_verified)
      verify_test_dependencies(TEST_PACKAGES ${x_TEST_PACKAGES})
    endif()

    if(NOT test_components_possible)
      set(build_tests OFF)
      set(build_test_libraries OFF)
    endif()
  endif()

  if(x_HAS_TESTS)
    if(build_tests)
      set(${x_PROJECT}_BUILD_TESTS TRUE CACHE BOOL "Build unit tests for ${x_PROJECT}")
    else()
      message(STATUS "${x_PROJECT} unit tests are DISABLED")
    endif()
  endif()

  if(x_HAS_TEST_LIBS)
    if(build_test_libs)
      set(${x_PROJECT}_BUILD_TEST_LIBS TRUE CACHE BOOL "Build test libraries for ${x_PROJECT}")
    else()
      message(STATUS "${x_PROJECT} test libraries are DISABLED")
    endif()
  endif()

  if(x_HAS_DOCS)
    option(${x_PROJECT}_ENABLE_DOCS "Enable build of documentation for ${x_PROJECT}" ON)
    set(${x_PROJECT}_BUILD_DOCS ${${x_PROJECT}_ENABLE_DOCS} CACHE BOOL "Build documentation for ${x_PROJECT}")
    if(NOT ${x_PROJECT}_BUILD_DOCS)
      message(STATUS "${x_PROJECT} documentation is DISABLED")
    endif()
  endif()

  if(x_EXAMPLES)
    option(${x_PROJECT}_ENABLE_EXAMPLES "Enable build of example code for ${x_PROJECT}" ON)
    set(${x_PROJECT}_BUILD_EXAMPLES ${${x_PROJECT}_ENABLE_EXAMPLES} CACHE BOOL "Build examples for ${x_PROJECT}")
    if(NOT ${x_PROJECT}_BUILD_EXAMPLES)
      message(STATUS "${x_PROJECT} examples are DISABLED")
    endif()
  endif()

  foreach(feat "TESTS" "TEST_LIBS" "DOCS" "EXAMPLES")
    if(DEFINED ${x_PROJECT}_ENABLE_${feat} AND NOT x_HAS_${feat})
      message(WARNING "${x_PROJECT}_ENABLE_${feat} is set but the package does not support it")
    endif()
  endforeach()

endfunction()
  
